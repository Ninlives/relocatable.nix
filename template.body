err() { echo "ERROR: $1"; }
info(){ echo "INFO:  $1"; }

usage(){
    echo "Usage: $0 [OPTION...]"
    echo "Available Options:"
    echo "    -d    The target directory."
    echo "    -r    The name of the symbol link to the root store path. DEFAULT: root."
    echo "    -h    Show this message."
    exit 0
}

ensure_dir(){
    DIR_LEN=${#DIR}
    if test $DIR_LEN -gt $MAX_PATH_LEN;then
        err "Cannot deploy to path with more than ${MAX_PATH_LEN} characters."
        exit 1
    fi
    if test ! -d "${DIR}";then
        err "${DIR} does not exist or is not a directory."
        exit 1
    fi
}

ensure_exe(){
    if ! type "$1" > /dev/null;then
        err "$1 is required by this script."
        exit 1
    fi
}

construct_sed_patterns(){
    if test $DIR_LEN -gt $STORE_LEN;then
        prefix_num=$(( $DIR_LEN - $STORE_LEN ))
        remain_num=$(( $HASH_LEN - $prefix_num ))
        replace_sed="s#\(${STORE}[0-9a-z]\{${prefix_num}\}\)\([0-9a-z]\{${remain_num}\}\)-#${DIR}\2-#g"
        transform_sed="s#${RSTORE}[0-9a-z]\{${prefix_num}\}##g"
    else
        prefix_num=$(( $STORE_LEN - $DIR_LEN ))
        prefix=$(printf '%*s' "${prefix_num}"|tr ' ' 'e')
        replace_sed="s#\(${STORE}\)\([0-9a-z]\{${HASH_LEN}\}\)-#${DIR}${prefix}\2-#g"
        transform_sed="s#${RSTORE}\([0-9a-z]\{${HASH_LEN}\}\)#${prefix}\1#g"
    fi
}

unpack_data(){
    construct_sed_patterns
    info "Unpacking data.."
    cat << % |
